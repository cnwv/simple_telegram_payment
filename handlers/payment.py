from aiogram.types import LabeledPrice, Message
from aiogram.types import PreCheckoutQuery, CallbackQuery

from keyboards.payment import payment_keyboard


async def send_invoice_handler(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=payment_keyboard()
    )


async def handle_payment_button(callback: CallbackQuery):
    amount = int(callback.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
    prices = [LabeledPrice(label=f"{amount} XTR", amount=amount)]

    await callback.message.answer_invoice(
        title=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞ - {amount} XTR",
        description=f"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª –Ω–∞ {amount} –∑–≤—ë–∑–¥!",
        prices=prices,
        provider_token="",
        payload=f"channel_support_{amount}",
        currency="XTR",
    )
    await callback.answer()


async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


async def success_payment_handler(message: Message):
    # there is logic for adding payment for your database
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount
    print(f"Payment received - User ID: {user_id}, Amount: {amount} stars")
    await message.answer(text="ü•≥–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!ü§ó")


async def pay_support_handler(message: Message):
    await message.answer(
        text="–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, "
             "–æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
    )